<%= pkg.name %> [![Build Status](https://travis-ci.org/cytb/simple-autoreload-server.png?branch=main)](https://travis-ci.org/cytb/simple-autoreload-server)
========================

A simple Web server on Node.js with autoreload/livereload feature.
  - Reload statically on update the html files
  - Refresh dynamically on update the files like css, js, png, and etc.
  - No browser extensions are needed. (uses only WebSocket.)
  - Broadcast handleable event on client side window.

Usage
----
  1. Install simple-autoreload-server via npm.

     (e.g. npm install simple-autoreload-server)

  2. Start autoreload-server from command line.

     (e.g. autoreload-server -d ./ -p 8080)

  3. Open server url with your browser.

     (e.g. iexplore http://localhost:8080/)

Installation
--------------
install this package via 'npm'.

```sh
npm install -g simple-autoreload-server
```

Command Line Usage
----
```sh
autoreload-server [options] [root-dir] [port]
```

### Example 1
Start server with options.

```sh
autoreload-server -w "**/**.{html,css,js}" ./site-files 8008
```
### Example 2
Start server with json instead of commandline-options.

command
```sh
autoreload-server
```

content of .autoreload.json
```sh
{
  "watch":  "**/**.html",
  "reload": "**/**.html",
  "mount": [
    {
      "path":   "modules/",
      "target": "/"
    }
  ],
  "inject": [
    {
      "content": "before-body.html",
      "which":   "**/**.html",
      "where":   "</body>",
      "prepend": true
    }
  ]
}
```

***In case of using another config json file instead of ".autoreload.json", invoke command with '-c' or '--config' option.***
***See [Options.md](./Options.md) and [config.json in examples](./examples/markdown-parser/config.json) for details.***

### Example 3
as module.

```
var launcher = require('<%= pkg.name %>');

var server = launcher({
  port: 8008,
  path: './',
  listDirectory: true,
  watch:  "*.{png,js,html,json,swf}"
  reload: "{*.json,static.swf}"
});
```


Command Line Options
----

option | default | help
:--- | :--- | :---
<%
  options.forEach(function(opt){
    if( opt.nocli ){ return; }
    var option = ("--"+opt.label) + (opt.short ? (", -"+opt.short) : "");
    var def    = (opt.def != null) ? ('`' + opt.def + '`') : '';
    var help   = opt.help;

%>`<%= option %>` | <%= def %> | _<%= help %>_
<%
  });
%>

See [Options.md](./Options.md) for details.

Client Module Usage
----
***note: available only for the web page injected the built-in script module.***

Client module will be exposed as window.AutoreloadClient (default).

and the module emits some events. set listener to window object to handle events.

e.g.

  window.addEventListener("AutoreloadClient.update", function(ev){...});


Currently, following events are handleable on client side.

event   | desc
:---    |:---
update  | file update detected
refresh | refresh request.
reload  | reload request.
scan    | before dom element scanning.
open    | connected.
close   | disconnected.
message | received a message above.

(server will send 'update' events only the file matched to 'watch' option.)

Some of events emit another events. (chained)

event   | emits
:---    |:---
message | (any events by server response)
update  | scan
scan    | refresh, reload
reload  | refresh (on failed or canceled)

internal operation and chain of event emission are cancelable by using "event.preventDefault()".

event listeners will receive an event object with 'detail' key.
and the 'detail' object has some of parameters below.

key       | desc
:---      |:---
client    | client module instance.
path      | path of file updated.
url       | url of file updated.
type      | original message type from server.
scan      | scan target list.
reload    | reload or not. (on reload event, set false to switch 'refresh')
target    | dom object of refresh target.
targetUrl | url of refresh target. (url which contained as dom attribute)

and the contents of './examples' may be a useful reference for usage of client module.
or see '[src/client.ls](./src/client.ls)' for more information.

Version
----
<%= pkg.version %>

License
----
<%= pkg.license %>

[<%= pkg.name %>]:<%= pkg.homepage %>

